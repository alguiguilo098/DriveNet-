// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace terminal {
class ComandoRequest;
struct ComandoRequestDefaultTypeInternal;
extern ComandoRequestDefaultTypeInternal _ComandoRequest_default_instance_;
class ComandoResponse;
struct ComandoResponseDefaultTypeInternal;
extern ComandoResponseDefaultTypeInternal _ComandoResponse_default_instance_;
}  // namespace terminal
PROTOBUF_NAMESPACE_OPEN
template<> ::terminal::ComandoRequest* Arena::CreateMaybeMessage<::terminal::ComandoRequest>(Arena*);
template<> ::terminal::ComandoResponse* Arena::CreateMaybeMessage<::terminal::ComandoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace terminal {

// ===================================================================

class ComandoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:terminal.ComandoRequest) */ {
 public:
  inline ComandoRequest() : ComandoRequest(nullptr) {}
  ~ComandoRequest() override;
  explicit constexpr ComandoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComandoRequest(const ComandoRequest& from);
  ComandoRequest(ComandoRequest&& from) noexcept
    : ComandoRequest() {
    *this = ::std::move(from);
  }

  inline ComandoRequest& operator=(const ComandoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComandoRequest& operator=(ComandoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComandoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComandoRequest* internal_default_instance() {
    return reinterpret_cast<const ComandoRequest*>(
               &_ComandoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComandoRequest& a, ComandoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComandoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComandoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComandoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComandoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComandoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComandoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComandoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "terminal.ComandoRequest";
  }
  protected:
  explicit ComandoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentosFieldNumber = 2,
    kComandoFieldNumber = 1,
  };
  // repeated string argumentos = 2;
  int argumentos_size() const;
  private:
  int _internal_argumentos_size() const;
  public:
  void clear_argumentos();
  const std::string& argumentos(int index) const;
  std::string* mutable_argumentos(int index);
  void set_argumentos(int index, const std::string& value);
  void set_argumentos(int index, std::string&& value);
  void set_argumentos(int index, const char* value);
  void set_argumentos(int index, const char* value, size_t size);
  std::string* add_argumentos();
  void add_argumentos(const std::string& value);
  void add_argumentos(std::string&& value);
  void add_argumentos(const char* value);
  void add_argumentos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argumentos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argumentos();
  private:
  const std::string& _internal_argumentos(int index) const;
  std::string* _internal_add_argumentos();
  public:

  // string comando = 1;
  void clear_comando();
  const std::string& comando() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comando(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comando();
  PROTOBUF_NODISCARD std::string* release_comando();
  void set_allocated_comando(std::string* comando);
  private:
  const std::string& _internal_comando() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comando(const std::string& value);
  std::string* _internal_mutable_comando();
  public:

  // @@protoc_insertion_point(class_scope:terminal.ComandoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argumentos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comando_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class ComandoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:terminal.ComandoResponse) */ {
 public:
  inline ComandoResponse() : ComandoResponse(nullptr) {}
  ~ComandoResponse() override;
  explicit constexpr ComandoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComandoResponse(const ComandoResponse& from);
  ComandoResponse(ComandoResponse&& from) noexcept
    : ComandoResponse() {
    *this = ::std::move(from);
  }

  inline ComandoResponse& operator=(const ComandoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComandoResponse& operator=(ComandoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComandoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComandoResponse* internal_default_instance() {
    return reinterpret_cast<const ComandoResponse*>(
               &_ComandoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComandoResponse& a, ComandoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ComandoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComandoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComandoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComandoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComandoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComandoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComandoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "terminal.ComandoResponse";
  }
  protected:
  explicit ComandoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaidaFieldNumber = 1,
    kErroFieldNumber = 2,
    kCodigoSaidaFieldNumber = 3,
  };
  // string saida = 1;
  void clear_saida();
  const std::string& saida() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_saida(ArgT0&& arg0, ArgT... args);
  std::string* mutable_saida();
  PROTOBUF_NODISCARD std::string* release_saida();
  void set_allocated_saida(std::string* saida);
  private:
  const std::string& _internal_saida() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saida(const std::string& value);
  std::string* _internal_mutable_saida();
  public:

  // string erro = 2;
  void clear_erro();
  const std::string& erro() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_erro(ArgT0&& arg0, ArgT... args);
  std::string* mutable_erro();
  PROTOBUF_NODISCARD std::string* release_erro();
  void set_allocated_erro(std::string* erro);
  private:
  const std::string& _internal_erro() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_erro(const std::string& value);
  std::string* _internal_mutable_erro();
  public:

  // int32 codigo_saida = 3;
  void clear_codigo_saida();
  int32_t codigo_saida() const;
  void set_codigo_saida(int32_t value);
  private:
  int32_t _internal_codigo_saida() const;
  void _internal_set_codigo_saida(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:terminal.ComandoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr saida_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr erro_;
  int32_t codigo_saida_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComandoRequest

// string comando = 1;
inline void ComandoRequest::clear_comando() {
  comando_.ClearToEmpty();
}
inline const std::string& ComandoRequest::comando() const {
  // @@protoc_insertion_point(field_get:terminal.ComandoRequest.comando)
  return _internal_comando();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComandoRequest::set_comando(ArgT0&& arg0, ArgT... args) {
 
 comando_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:terminal.ComandoRequest.comando)
}
inline std::string* ComandoRequest::mutable_comando() {
  std::string* _s = _internal_mutable_comando();
  // @@protoc_insertion_point(field_mutable:terminal.ComandoRequest.comando)
  return _s;
}
inline const std::string& ComandoRequest::_internal_comando() const {
  return comando_.Get();
}
inline void ComandoRequest::_internal_set_comando(const std::string& value) {
  
  comando_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComandoRequest::_internal_mutable_comando() {
  
  return comando_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComandoRequest::release_comando() {
  // @@protoc_insertion_point(field_release:terminal.ComandoRequest.comando)
  return comando_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComandoRequest::set_allocated_comando(std::string* comando) {
  if (comando != nullptr) {
    
  } else {
    
  }
  comando_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comando,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (comando_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    comando_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:terminal.ComandoRequest.comando)
}

// repeated string argumentos = 2;
inline int ComandoRequest::_internal_argumentos_size() const {
  return argumentos_.size();
}
inline int ComandoRequest::argumentos_size() const {
  return _internal_argumentos_size();
}
inline void ComandoRequest::clear_argumentos() {
  argumentos_.Clear();
}
inline std::string* ComandoRequest::add_argumentos() {
  std::string* _s = _internal_add_argumentos();
  // @@protoc_insertion_point(field_add_mutable:terminal.ComandoRequest.argumentos)
  return _s;
}
inline const std::string& ComandoRequest::_internal_argumentos(int index) const {
  return argumentos_.Get(index);
}
inline const std::string& ComandoRequest::argumentos(int index) const {
  // @@protoc_insertion_point(field_get:terminal.ComandoRequest.argumentos)
  return _internal_argumentos(index);
}
inline std::string* ComandoRequest::mutable_argumentos(int index) {
  // @@protoc_insertion_point(field_mutable:terminal.ComandoRequest.argumentos)
  return argumentos_.Mutable(index);
}
inline void ComandoRequest::set_argumentos(int index, const std::string& value) {
  argumentos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:terminal.ComandoRequest.argumentos)
}
inline void ComandoRequest::set_argumentos(int index, std::string&& value) {
  argumentos_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:terminal.ComandoRequest.argumentos)
}
inline void ComandoRequest::set_argumentos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argumentos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:terminal.ComandoRequest.argumentos)
}
inline void ComandoRequest::set_argumentos(int index, const char* value, size_t size) {
  argumentos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:terminal.ComandoRequest.argumentos)
}
inline std::string* ComandoRequest::_internal_add_argumentos() {
  return argumentos_.Add();
}
inline void ComandoRequest::add_argumentos(const std::string& value) {
  argumentos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:terminal.ComandoRequest.argumentos)
}
inline void ComandoRequest::add_argumentos(std::string&& value) {
  argumentos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:terminal.ComandoRequest.argumentos)
}
inline void ComandoRequest::add_argumentos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argumentos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:terminal.ComandoRequest.argumentos)
}
inline void ComandoRequest::add_argumentos(const char* value, size_t size) {
  argumentos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:terminal.ComandoRequest.argumentos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComandoRequest::argumentos() const {
  // @@protoc_insertion_point(field_list:terminal.ComandoRequest.argumentos)
  return argumentos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComandoRequest::mutable_argumentos() {
  // @@protoc_insertion_point(field_mutable_list:terminal.ComandoRequest.argumentos)
  return &argumentos_;
}

// -------------------------------------------------------------------

// ComandoResponse

// string saida = 1;
inline void ComandoResponse::clear_saida() {
  saida_.ClearToEmpty();
}
inline const std::string& ComandoResponse::saida() const {
  // @@protoc_insertion_point(field_get:terminal.ComandoResponse.saida)
  return _internal_saida();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComandoResponse::set_saida(ArgT0&& arg0, ArgT... args) {
 
 saida_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:terminal.ComandoResponse.saida)
}
inline std::string* ComandoResponse::mutable_saida() {
  std::string* _s = _internal_mutable_saida();
  // @@protoc_insertion_point(field_mutable:terminal.ComandoResponse.saida)
  return _s;
}
inline const std::string& ComandoResponse::_internal_saida() const {
  return saida_.Get();
}
inline void ComandoResponse::_internal_set_saida(const std::string& value) {
  
  saida_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComandoResponse::_internal_mutable_saida() {
  
  return saida_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComandoResponse::release_saida() {
  // @@protoc_insertion_point(field_release:terminal.ComandoResponse.saida)
  return saida_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComandoResponse::set_allocated_saida(std::string* saida) {
  if (saida != nullptr) {
    
  } else {
    
  }
  saida_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), saida,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (saida_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    saida_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:terminal.ComandoResponse.saida)
}

// string erro = 2;
inline void ComandoResponse::clear_erro() {
  erro_.ClearToEmpty();
}
inline const std::string& ComandoResponse::erro() const {
  // @@protoc_insertion_point(field_get:terminal.ComandoResponse.erro)
  return _internal_erro();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComandoResponse::set_erro(ArgT0&& arg0, ArgT... args) {
 
 erro_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:terminal.ComandoResponse.erro)
}
inline std::string* ComandoResponse::mutable_erro() {
  std::string* _s = _internal_mutable_erro();
  // @@protoc_insertion_point(field_mutable:terminal.ComandoResponse.erro)
  return _s;
}
inline const std::string& ComandoResponse::_internal_erro() const {
  return erro_.Get();
}
inline void ComandoResponse::_internal_set_erro(const std::string& value) {
  
  erro_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComandoResponse::_internal_mutable_erro() {
  
  return erro_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComandoResponse::release_erro() {
  // @@protoc_insertion_point(field_release:terminal.ComandoResponse.erro)
  return erro_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComandoResponse::set_allocated_erro(std::string* erro) {
  if (erro != nullptr) {
    
  } else {
    
  }
  erro_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), erro,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (erro_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    erro_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:terminal.ComandoResponse.erro)
}

// int32 codigo_saida = 3;
inline void ComandoResponse::clear_codigo_saida() {
  codigo_saida_ = 0;
}
inline int32_t ComandoResponse::_internal_codigo_saida() const {
  return codigo_saida_;
}
inline int32_t ComandoResponse::codigo_saida() const {
  // @@protoc_insertion_point(field_get:terminal.ComandoResponse.codigo_saida)
  return _internal_codigo_saida();
}
inline void ComandoResponse::_internal_set_codigo_saida(int32_t value) {
  
  codigo_saida_ = value;
}
inline void ComandoResponse::set_codigo_saida(int32_t value) {
  _internal_set_codigo_saida(value);
  // @@protoc_insertion_point(field_set:terminal.ComandoResponse.codigo_saida)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace terminal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
