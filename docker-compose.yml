
services:
  redis:
    image: redis
    container_name: redis-server
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    restart: always

  mongo1:
    image: mongo:7.0
    container_name: mongo1
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb
    networks:
      - mongo-cluster

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    volumes:
      - mongo2_data:/data/db
      - mongo2_config:/data/configdb
    networks:
      - mongo-cluster

  mongo-arbiter:
    image: mongo:7.0
    container_name: mongo-arbiter
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - "27019:27019"
    volumes:
      - mongo_arbiter_data:/data/db
    networks:
      - mongo-cluster

  mongo-init:
    image: mongo:7.0
    container_name: mongo-init
    depends_on:
      - mongo1
      - mongo2
      - mongo-arbiter
    entrypoint: >
      bash -c "
      sleep 10 &&
      mongosh --host mongo1 --port 27017 --eval '
        try {
          rs.initiate({
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongo1:27017\", priority: 1 },
              { _id: 1, host: \"mongo2:27018\", priority: 0.5 },
              { _id: 2, host: \"mongo-arbiter:27019\", arbiterOnly: true }
            ]
          })
        } catch(e) { print(e) }'"
    restart: "no"
    networks:
      - mongo-cluster

volumes:
  redis-data:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo_arbiter_data:

networks:
  mongo-cluster:
